name: tests

on:
  push:
    branches: [master, main]
    paths-ignore: ['**.md']
    tags-ignore: ['**']
  pull_request:
    paths-ignore: ['**.md']

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  gitleaks:
    name: 🔐 Check for GitLeaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: {fetch-depth: 0}

      - uses: gacts/gitleaks@v1

  docs:
    name: 📕 Build the docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with: {hugo-version: 0.107.0, extended: true}

      - run: npm ci

      - name: Build
        working-directory: docs
        run: hugo --environment production --i18n-warnings --noChmod --noTimes

  golangci-lint:
    name: 🧪 Run GolangCI-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: gacts/setup-go-with-cache@v1
        with: {go-version-file: go.mod}

      - run: go generate ./...

      - uses: golangci/golangci-lint-action@v3
        with: {skip-pkg-cache: true, skip-build-cache: true}

  go-test:
    name: 🧪 Run unit-tests (Go)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: {fetch-depth: 2} # Fixes codecov error 'Issue detecting commit SHA'

      - uses: gacts/setup-go-with-cache@v1
        with: {go-version-file: go.mod}

      - run:  go generate ./...

      - run: go test -race -covermode=atomic -coverprofile /tmp/coverage.txt ./...

      - uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: /tmp/coverage.txt

  build-app:
    name: 🏗️ Build the app (${{ matrix.os }} / ${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, darwin] # linux, freebsd, darwin, windows
        arch: [amd64]                # amd64, 386
    needs: [golangci-lint, go-test]
    steps:
      - uses: actions/checkout@v3

      - uses: gacts/setup-go-with-cache@v1
        with: {go-version-file: go.mod}

      - {uses: gacts/github-slug@v1, id: slug}

      - run: go generate ./...

      - env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          LDFLAGS: -s -w -X github.com/tarampampam/poke/internal/version.version=${{ steps.slug.outputs.commit-hash-short }}
        run: go build -trimpath -ldflags "$LDFLAGS" -o /tmp/poke ./cmd/poke/

      - name: Try to execute
        if: matrix.os == 'linux'
        run: /tmp/poke --version && /tmp/poke -h

      - uses: actions/upload-artifact@v3
        with:
          name: poke-${{ matrix.os }}-${{ matrix.arch }}
          path: /tmp/poke
          if-no-files-found: error
          retention-days: 3

  build-docker-image:
    name: 🏗️ Build the docker image
    runs-on: ubuntu-latest
    needs: [golangci-lint, go-test]
    steps:
      - uses: actions/checkout@v3

      - {uses: gacts/github-slug@v1, id: slug}

      - uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          build-args: "APP_VERSION=${{ steps.slug.outputs.commit-hash-short }}"
          tags: app:local

      - run: docker run --rm app:local --version

      - run: docker save app:local > ./docker-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with: {path: ./docker-image.tar, name: docker-image, retention-days: 1}

      - uses: aquasecurity/trivy-action@0.8.0
        with:
          input: docker-image.tar
          format: sarif
          severity: MEDIUM,HIGH,CRITICAL
          exit-code: 1
          output: trivy-results.sarif

      - uses: github/codeql-action/upload-sarif@v2
        if: always()
        continue-on-error: true
        with: {sarif_file: trivy-results.sarif}
